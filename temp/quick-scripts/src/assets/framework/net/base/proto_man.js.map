{"version":3,"sources":["assets\\framework\\net\\base\\proto_man.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import proto_tools from './proto_tools';\r\n\r\nexport default class proto_man {\r\n    // buf协议的编码/解码管理  stype, ctype --> encoder/decoder\r\n    static decoders = {}; // 保存当前我们buf协议所有的解码函数, stype,ctype --> decoder;\r\n    static encoders = {}; // 保存当前我们buf协议所有的编码函数, stype, ctype --> encoder\r\n\r\n    static PROTO_JSON: number = 1; \r\n    static PROTO_BUF: number = 2;\r\n\r\n    // 加密\r\n    static encrypt_cmd(str_of_buf) {\r\n        return str_of_buf;\r\n    }\r\n\r\n    // 解密\r\n    static decrypt_cmd(str_of_buf) {\r\n        return str_of_buf;\r\n    }\r\n\r\n    static _json_encode(stype, ctype, body) {\r\n        var cmd = {};\r\n        cmd[0] = body;\r\n\r\n        var str = JSON.stringify(cmd);\r\n\r\n        var cmd_buf = proto_tools.encode_str_cmd(stype, ctype, str);\r\n        return cmd_buf;\r\n    }\r\n\r\n    static _json_decode(cmd_buf) {\r\n        var cmd = proto_tools.decode_str_cmd(cmd_buf);\r\n        var cmd_json = cmd[2];\r\n        try {\r\n            var body_set = JSON.parse(cmd_json);\r\n            cmd[2] = body_set[0];\r\n        }\r\n        catch(e) {\r\n            return null;\r\n        }\r\n        if (!cmd || \r\n            typeof(cmd[0])==\"undefined\" ||\r\n            typeof(cmd[1])==\"undefined\" ||\r\n            typeof(cmd[2])==\"undefined\") {\r\n            return null;\r\n        }\r\n        return cmd;\r\n    } \r\n\r\n    // key, value, stype + ctype -->key: value\r\n    static get_key(stype, ctype) {\r\n        return (stype * 65536 + ctype);\r\n    }\r\n\r\n    // 参数1: 协议类型 json, buf协议;\r\n    // 参数2: 服务类型 \r\n    // 参数3: 命令号;\r\n    // 参数4: 发送的数据本地，js对象/js文本，...\r\n    // 返回是一段编码后的数据;\r\n    static encode_cmd(proto_type, stype, ctype, body) {\r\n        var buf = null;\r\n        var dataview;\r\n        if (proto_type == proto_man.PROTO_JSON) {\r\n            dataview = this._json_encode(stype, ctype, body);\r\n        }\r\n        else { // buf协议\r\n            var key = this.get_key(stype, ctype);\r\n            if (!this.encoders[key]) {\r\n                return null;\r\n            }\r\n            // end \r\n            dataview = this.encoders[key](stype, ctype, body);\r\n        }\r\n\r\n        proto_tools.write_prototype_inbuf(dataview, proto_type);\r\n        \r\n        buf = dataview.buffer;\r\n        if (buf) {\r\n            buf = this.encrypt_cmd(buf); // 加密\t\r\n        }\r\n        \r\n        return buf;\r\n    }\r\n\r\n    // 参数1: 协议类型\r\n    // 参数2: 接手到的数据命令\r\n    // 返回: {0: stype, 1, ctype, 2: body}\r\n    static decode_cmd(proto_type, str_or_buf) {\r\n        str_or_buf = this.decrypt_cmd(str_or_buf); // 解密\r\n        var cmd = null; \r\n        var dataview = new DataView(str_or_buf);\r\n        if (dataview.byteLength < proto_tools.header_size) {\r\n            return null;\r\n        }\r\n\r\n        if (proto_type == proto_man.PROTO_JSON) {\r\n            return this._json_decode(dataview);\r\n        }\r\n\r\n        /*if (str_or_buf.length < 4) {\r\n            return null;\r\n        }*/\r\n\r\n        \r\n        var stype = proto_tools.read_int16(dataview, 0);\r\n        var ctype = proto_tools.read_int16(dataview, 2);\r\n        var key = this.get_key(stype, ctype);\r\n        \r\n        if (!this.decoders[key]) {\r\n            return null;\r\n        }\r\n        // cmd = decoders[key](str_or_buf);\r\n        cmd = this.decoders[key](dataview);\r\n        return cmd;\r\n    }\r\n\r\n\r\n    // encode_func(body) return 二进制bufffer对象\r\n    static reg_buf_encoder(stype, ctype, encode_func) {\r\n        var key = this.get_key(stype, ctype);\r\n        if (this.encoders[key]) { // 已经注册过了，是否搞错了\r\n            // log.warn(\"stype: \" + stype + \" ctype: \" + ctype + \"is reged!!!\");\r\n        }\r\n\r\n        this.encoders[key] = encode_func;\r\n    }\r\n\r\n    // decode_func(cmd_buf) return cmd { 0: 服务号, 1: 命令号, 2: body};\r\n    static reg_buf_decoder(stype, ctype, decode_func) {\r\n        var key = this.get_key(stype, ctype);\r\n        if (this.decoders[key]) { // 已经注册过了，是否搞错了\r\n            // log.warn(\"stype: \" + stype + \" ctype: \" + ctype + \"is reged!!!\");\r\n        }\r\n\r\n        this.decoders[key] = decode_func;\r\n    }\r\n}"]}