{"version":3,"sources":["assets\\framework\\net\\WSManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import proto_man from './base/proto_man';\r\n\r\nexport default class WSManager {\r\n    static singleInstance: WSManager = null;\r\n    static getInstance(): WSManager {\r\n        if (WSManager.singleInstance == null) {\r\n            WSManager.singleInstance = new WSManager();\r\n        }\r\n        return WSManager.singleInstance;\r\n    }\r\n\r\n    sock: WebSocket = null;\r\n    serivces_handler: Object = null;\r\n    proto_type: number = 0;\r\n    is_connected: boolean = false;\r\n    // 心跳包ID\r\n    heart_beat_id: number = null;\r\n    // 心跳检测的间隔时间\r\n    heart_beat_time: number = 10;\r\n    // 心跳检测的的未连接的次数\r\n    heart_beat_num: number = 0;\r\n    // 是否已经开启了心跳检测\r\n    is_start_heart_beat: boolean = false;\r\n    cache_send_cmd: any[] = [];\r\n\r\n\r\n\r\n    _on_opened(event) {\r\n        console.log(\"ws connect server success\");\r\n        this.is_connected = true;\r\n        if (this.cache_send_cmd.length  > 0) {\r\n            let cache = this.cache_send_cmd.shift();\r\n            this.send_cmd(cache[0], cache[1], cache[2]);\r\n            this.cache_send_cmd = [];\r\n        }\r\n   \r\n    }\r\n\r\n    // 开启心跳检测\r\n    _start_check_heart_beat() {\r\n        // if (this.is_start_heart_beat) {\r\n        //     return;\r\n        // }\r\n\r\n        // this.is_start_heart_beat = true;\r\n\r\n        // this._stop_check_heart_beat();\r\n        \r\n        // this.heart_beat_id = setInterval(() => {\r\n        //     this.send_cmd(2, 4);\r\n        // }, this.heart_beat_time * 1000);\r\n    }\r\n\r\n\r\n    // 停止心跳检测\r\n    _stop_check_heart_beat() {\r\n        clearInterval(this.heart_beat_id);\r\n        this.heart_beat_id = null;\r\n    }\r\n    \r\n    _on_recv_data(event) {\r\n        var str_or_buf = event.data;\r\n        if (!this.serivces_handler) {\r\n            return;\r\n        }\r\n        \r\n        var cmd = proto_man.decode_cmd(this.proto_type, str_or_buf);\r\n        if (!cmd) {\r\n            return;\r\n        }\r\n        \r\n        var stype = cmd[0];\r\n        var ctype = cmd[1];\r\n\r\n        if (stype === 2 && ctype === 4) {\r\n            // 收到心跳包，心跳包处理在此处理\r\n            console.log(\"收到心跳包处理\");\r\n            this._start_check_heart_beat();\r\n        }\r\n\r\n        if (this.serivces_handler[stype]) {\r\n            this.serivces_handler[stype](cmd[0], cmd[1], cmd[2]);\r\n        }\r\n    }\r\n    \r\n    _on_socket_close(event) {\r\n        if (this.sock) {\r\n            this.close();\r\n        }\r\n    }\r\n    \r\n    _on_socket_err(event) {\r\n        this.close();\r\n    }\r\n    \r\n    connect(url, proto_type) {\r\n        this.sock = new WebSocket(url);\r\n        this.sock.binaryType = \"arraybuffer\";\r\n\r\n        this.sock.onopen = this._on_opened.bind(this);\r\n        this.sock.onmessage = this._on_recv_data.bind(this);\r\n        this.sock.onclose = this._on_socket_close.bind(this);\r\n        this.sock.onerror = this._on_socket_err.bind(this);\r\n        \r\n        this.proto_type = proto_type;\r\n    }\r\n       \r\n    send_cmd(stype, ctype, body) {\r\n        if (!this.sock || !this.is_connected) {\r\n            // 重新连接 socket\r\n            let cache = [];\r\n            cache[0] = stype;\r\n            cache[1] = ctype;\r\n            cache[2] = body;\r\n            this.cache_send_cmd.push(cache);\r\n            this.connect(\"ws://127.0.0.1:6081/ws\", proto_man.PROTO_JSON);\r\n            return;\r\n        }\r\n        console.log(`stype:${stype}, ctype:${ctype}, body:${body}`);\r\n        var buf = proto_man.encode_cmd(this.proto_type, stype, ctype, body);\r\n        \r\n        this.sock.send(buf);\r\n        this._start_check_heart_beat();\r\n    }\r\n\r\n    \r\n    close() {\r\n        this.is_connected = false;\r\n        this._stop_check_heart_beat();\r\n        if (this.sock !== null) {\r\n            this.sock.close();\r\n            this.sock = null;\r\n        }\r\n    }\r\n    \r\n    register_serivces_handler(serivces_handler) {\r\n        this.serivces_handler = serivces_handler;\r\n    }\r\n}"]}