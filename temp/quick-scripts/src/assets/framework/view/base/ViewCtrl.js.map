{"version":3,"sources":["assets\\framework\\view\\base\\ViewCtrl.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import BaseComponent from \"./BaseComponent\";\r\n\r\nexport default class ViewCtrl {\r\n    _tag: string = \"view\"; // 界面标识符： view, subview, item,\r\n    _referenceKey: string = null;\r\n    name: string = \"\";\r\n    node: cc.Node = null;\r\n    parent: cc.Node = null;\r\n    data: any = null;\r\n    logicComponet: BaseComponent = null;\r\n    parentViewCtrl: bb.ViewCtrl = null;\r\n    _subViewCtrl: Array<bb.ViewCtrl> = [];\r\n\r\n    hideView(): void {\r\n        this.node.active = false;\r\n    }\r\n\r\n    showView(): void {\r\n        this.node.active = true;\r\n    }\r\n\r\n    addSubViewCtrl(subViewCtrl: bb.ViewCtrl) {\r\n        this._subViewCtrl.push(subViewCtrl);\r\n    }\r\n\r\n    destroyNode(): void {\r\n        bb.UILoader.releaseNodeRes(this.node);\r\n        bb.UILoader.releaseRes(this._referenceKey);\r\n\r\n        this._subViewCtrl.forEach((item) => {\r\n            bb.UILoader.releaseRes(item[\"_referenceKey\"]);\r\n        })\r\n\r\n        if (this._tag === \"view\") {\r\n            bb.ViewManager.removeView(this);\r\n        }\r\n        this.node.destroy();\r\n        bb.UILoader.gc();\r\n    }\r\n\r\n    popSubView(depth?: number): void {\r\n        if (depth !== null && depth !== undefined) {\r\n            if (this._subViewCtrl.length < depth) {\r\n                cc.log(`pop view depth error viewStack = ${this._subViewCtrl.length}, depth = ${depth}`);\r\n                return;\r\n            }\r\n\r\n            let viewCtrls = this._subViewCtrl.splice(this._subViewCtrl.length - depth, depth);\r\n            viewCtrls.forEach((viewCtrl) => {\r\n                viewCtrl.destroyNode();\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (this._subViewCtrl.length < 1) {\r\n            return;\r\n        }\r\n        let viewCtrl = this._subViewCtrl.pop();\r\n        viewCtrl.destroyNode();\r\n    }\r\n\r\n    popView(depth?: number): void {\r\n        let subViewCtrls = this.parentViewCtrl[\"_subViewCtrl\"];\r\n        if (depth !== null && depth !== undefined) {\r\n            if (subViewCtrls.length < depth) {\r\n                cc.log(`pop view depth error viewStack = ${subViewCtrls.length}, depth = ${depth}`);\r\n                return;\r\n            }\r\n\r\n            let viewCtrls =subViewCtrls.splice(subViewCtrls.length - depth, depth);\r\n            viewCtrls.forEach((viewCtrl) => {\r\n                viewCtrl.destroyNode();\r\n            })\r\n            return;\r\n        }\r\n\r\n        if (subViewCtrls.length < 1) {\r\n            return;\r\n        }\r\n        let viewCtrl = subViewCtrls.pop();\r\n        viewCtrl.destroyNode();\r\n    }\r\n}"]}