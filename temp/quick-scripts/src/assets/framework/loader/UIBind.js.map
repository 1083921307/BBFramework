{"version":3,"sources":["assets\\framework\\loader\\UIBind.ts"],"names":[],"mappings":";;;;;;AAAA,IAAM,mBAAmB,GAAG;IACxB,eAAe;IACf,cAAc;IACd,aAAa;IACb,gBAAgB;CACnB,CAAC;AAGF;IAAA;QAWY,YAAO,GAAW,GAAG,CAAC;QACtB,aAAQ,GAAe,EAAE,CAAC;IA2VtC,CAAC;IApWU,kBAAW,GAAlB;QACI,IAAI,MAAM,CAAC,cAAc,IAAI,IAAI,EAAE;YAC/B,MAAM,CAAC,cAAc,GAAG,IAAI,MAAM,EAAE,CAAC;SACxC;QACD,OAAO,MAAM,CAAC,cAAc,CAAC;IACjC,CAAC;IAOD,OAAO;IACA,8BAAa,GAApB,UAAqB,SAAuB,EAAE,OAAsB;QAApE,iBAcC;QAd6C,wBAAA,EAAA,cAAsB;QAChE,SAAS,CAAC,UAAU,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC;QAEtC,IAAI,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC;QAC1B,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,aAAa;YACtC,IAAI,IAAI,GAAG,KAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,CAAC;YAChD,IAAI,GAAG,MAAI,IAAM,CAAC;YAClB,IAAI,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,WAAW;QACX,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC;QAC1D,WAAW;QACX,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED,mBAAmB;IACZ,yBAAQ,GAAf,UAAgB,IAAc,EAAE,MAAoB,EAAE,OAAsB;QAA5E,iBA+BC;QA/BqD,wBAAA,EAAA,cAAsB;QACxE,MAAM;QACN,MAAM,CAAC,UAAU,CAAC,GAAG,OAAO,IAAI,EAAE,CAAC;QACnC,SAAS;QACT,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;YACtB,SAAS;YACT,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,KAAK,IAAI,EAAE;gBACpC,OAAO;aACV;YACD,gBAAgB;YAChB,OAAO,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;YACjC,mBAAmB;YACnB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,UAAC,GAAG;gBAC1C,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;YACvB,CAAC,CAAC,CAAC;SACN;QAED,QAAQ;QACR,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,IAAI,MAAA,EAAE,CAAC;QAChC,qBAAqB;QACrB,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,SAAS;YAClC,IAAI,IAAI,GAAG,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAC5C,IAAI,GAAG,MAAI,IAAM,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;YACzB,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,QAAQ;QACR,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACtC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED;;;;OAIG;IACK,4BAAW,GAAnB,UAAoB,UAAoB,EAAE,MAAoB;QAA9D,iBAyEC;QAxEG,IAAM,IAAI,GAAG,UAAU,CAAC;QACxB,IAAI,UAAU,GAAG,KAAK,CAAC;QACvB,gBAAgB;QAChB,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,OAAO,EAAE;YAC/B,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,UAAC,SAAS;gBAClC,IAAI,IAAI,GAAG,KAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;gBAE5C,IAAI,GAAG,MAAI,IAAM,CAAC;gBAClB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE;oBACxC,EAAE,CAAC,IAAI,CAAI,IAAI,gCAA6B,CAAC,CAAC;oBAC9C,OAAO;iBACV;gBAED,IAAI,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC;gBACvB,oCAAoC;gBACpC,IAAI,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;oBACnC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;iBAC5B;gBAED,mCAAmC;gBACnC,sBAAsB;gBACtB,iDAAiD;gBACjD,6BAA6B;gBAC7B,QAAQ;gBAER,0BAA0B;gBAC1B,kCAAkC;gBAClC,QAAQ;gBACR,IAAI;YACR,CAAC,CAAC,CAAC;SACN;QAED,MAAM;QACN,IAAI,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,IAAI,UAAU,EAAE;YACrB,OAAO;SACV;QAED,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,KAAK;YACxB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACtB,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,KAAI,CAAC,OAAO,EAAE;gBAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBAE9B,QAAQ;gBACR,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;oBACd,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;oBAC5C,KAAK,CAAC,GAAG,CAAC,GAAE,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;oBACnC,IAAI,GAAG,KAAK,CAAC,YAAY,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAChF,IAAI,CAAC,SAAS,EAAE;wBACZ,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC;qBACrB;iBACJ;gBAED,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE;oBAC1C,EAAE,CAAC,IAAI,CAAI,MAAM,CAAC,IAAI,SAAI,IAAI,gCAA6B,CAAC,CAAC;oBAC7D,OAAO;iBACV;gBACD,KAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;gBAEnC,MAAM,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;gBAErB,SAAS;gBACT,IAAI,MAAM,CAAC,YAAY,CAAC,EAAE;oBACtB,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;iBACtC;aACJ;iBAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACpB,UAAU;gBACV,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;aACtB;YAED,KAAI,CAAC,WAAW,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,+BAAc,GAAtB,UAAuB,OAAO;QAA9B,iBAkBC;QAjBG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACzB,OAAO,GAAG,CAAC,OAAO,CAAC,CAAC;SACvB;QAED,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;YACnB,QAAQ;YACR,IAAI,UAAU,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,IAAI,IAAI,KAAK,MAAM,EAA5C,CAA4C,CAAC,CAAC;YAC1F,IAAI,UAAU,EAAE;gBACZ,OAAO;aACV;YAED,UAAU;YACV,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3B,IAAI,MAAM,CAAC,UAAU,EAAE;gBACnB,MAAM,CAAC,UAAU,EAAE,CAAC;aACvB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,iCAAgB,GAAvB,UAAwB,SAAwB;QAC5C,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,qBAAqB;IACb,mCAAkB,GAA1B,UAA2B,IAAa,EAAE,MAAoB;QAC1D,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,MAAM;YACzB,IAAI,MAAM,CAAC,WAAW,EAAE;gBACpB,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;aACpC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kBAAkB;IACV,iCAAgB,GAAxB,UAAyB,IAAc,EAAE,MAAoB;QACzD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,MAAM;YACzB,IAAI,MAAM,CAAC,SAAS,EAAE;gBAClB,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;aAClC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,SAAS;IACD,kCAAiB,GAAzB,UAA0B,IAAc,EAAE,KAAqB;QAArB,sBAAA,EAAA,YAAqB;QAC3D,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC;QAC3C,IAAI,IAAI,EAAE;YACN,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACxF;QAED,IAAI,KAAK,EAAE;YACP,OAAO,QAAM,IAAI,GAAG,KAAO,CAAC;SAC/B;QAED,OAAO;YACH,QAAM,IAAI,eAAY;YACtB,QAAM,IAAI,cAAW;YACrB,QAAM,IAAI,aAAU;YACpB,QAAM,IAAI,gBAAa;SAC1B,CAAC;IACN,CAAC;IAID,OAAO;IACC,+BAAc,GAAtB,UAAuB,IAAa,EAAE,MAAoB,EAAE,YAAmB;QAA/E,iBA6DC;QA7D2D,6BAAA,EAAA,mBAAmB;QAC3E,uCAAuC;QACvC,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;YAC/B,OAAO;SACV;QAED,IAAM,UAAU,GAAG,YAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAChE,IAAM,UAAU,GAAG;YACf,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW;YAC7B,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU;YAC5B,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS;YAC3B,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY;SACjC,CAAC;QAEF,UAAU,CAAC,OAAO,CAAC,UAAC,SAAS,EAAE,KAAK;YAChC,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;gBAC7C,OAAO;aACV;YAED,IAAI,CAAC,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,UAAC,KAAK;gBAC7B,kBAAkB;gBAClB,IAAI,SAAS,GAAG,KAAK,CAAC,aAAa,CAAC;gBACpC,IAAI,SAAS,CAAC,YAAY,KAAK,KAAK,IAAI,SAAS,CAAC,MAAM,KAAK,KAAK,EAAE;oBAChE,OAAO;iBACV;gBAED,gCAAgC;gBAChC,IAAM,MAAM,GAAG,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;gBACjD,IAAI,MAAM,IAAI,MAAM,CAAC,YAAY,KAAK,KAAK,EAAE;oBACzC,OAAO;iBACV;gBACD,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;gBACpC,QAAQ;gBACR,IAAM,YAAY,GAAG,SAAS,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;gBACxE,IAAI,YAAY,EAAE;oBACd,KAAI,CAAC,0BAA0B,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC;iBAClE;gBAED,cAAc;gBACd,IAAI,WAAW,CAAC;gBAChB,IAAI,SAAS,EAAE;oBACX,WAAW,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;oBACvD,2BAA2B;oBAC3B,IAAI,KAAK,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,WAAW,KAAK,KAAK,EAAE;wBACvE,SAAS,CAAC,cAAc,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;qBACrD;yBAAM;wBACH,IAAI,CAAC,gBAAgB,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;wBAC/C,KAAK,CAAC,eAAe,EAAE,CAAC;qBAC3B;iBACJ;gBAED,gCAAgC;gBAChC,IAAI,YAAY,EAAE;oBACd,KAAI,CAAC,yBAAyB,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;iBAC9E;YACL,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;QAEH,QAAQ;QACR,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAGD;;;;;OAKG;IACK,2CAA0B,GAAlC,UAAmC,IAAI,EAAE,KAAK,EAAE,YAAY;QACxD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,IAAI;YACvB,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC1B,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;aACvD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACK,mCAAkB,GAA1B,UAA2B,UAAU,EAAE,MAAM;QACzC,IAAM,IAAI,GAAG,UAAU,CAAC;QACxB,IAAM,SAAS,GAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;QAE7D,IAAM,SAAS,GAAI,MAAM,CAAC,KAAG,SAAW,CAAC,CAAC;QAC1C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAC7B,OAAO;SACV;QAED,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;QAC5B,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE;YACjC,IAAI,IAAI,CAAC,eAAe,EAAE;gBACtB,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBACnC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;gBACzB,OAAO,IAAI,CAAC,YAAY,CAAC;aAC5B;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,UAAC,KAAK;YACzC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;gBAC9B,iBAAiB;gBACjB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC1D,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;YAC7B,CAAC,EAAE,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;;OAMG;IACK,mCAAkB,GAA1B,UAA2B,IAAI,EAAE,MAAM;QACnC,OAAO;QACP,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAC,IAAI;YACnC,IAAI,IAAI,CAAC,WAAW,EAAE;gBAClB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,KAAK,CAAC;aACnD;YACD,OAAO,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,MAAM,CAAC;IACnB,CAAC;IAEA;;;;;MAKE;IACM,0CAAyB,GAAlC,UAAmC,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,WAAW;QACrE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,IAAI;YACvB,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,KAAK,EAAE,YAAY,EAAE,WAAW,CAAC,CAAC;aACnE;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,2BAAU,GAAjB,UAAkB,KAAK;QACnB,OAAO,OAAO,KAAK,KAAK,UAAU,CAAC;IACvC,CAAC;IApWM,qBAAc,GAAW,IAAI,CAAC;IAqWzC,aAAC;CAvWD,AAuWC,IAAA;kBAvWoB,MAAM","file":"","sourceRoot":"/","sourcesContent":["const DEFAULT_EVENT_NAMES = [\r\n    '_onTouchStart',\r\n    '_onTouchMove',\r\n    '_onTouchEnd',\r\n    '_onTouchCancel',\r\n];\r\n\r\n\r\nexport default class UIBind {\r\n\r\n    static singleInstance: UIBind = null;\r\n    static getInstance(): UIBind {\r\n        if (UIBind.singleInstance == null) {\r\n            UIBind.singleInstance = new UIBind();\r\n        }\r\n        return UIBind.singleInstance;\r\n    }\r\n\r\n\r\n    private _prefix: string = '_';\r\n    private _plugins: Array<any> = [];\r\n   \r\n\r\n    // 绑定组件\r\n    public bindComponent(component: cc.Component, options: object = null) : void {\r\n        component[\"$options\"] = options || {};\r\n    \r\n        let root = component.node;\r\n        root[\"_components\"].forEach((nodeComponent) => {\r\n            let name = this.getComponentName(nodeComponent);\r\n            name = `$${name}`;\r\n            root[name] = nodeComponent;\r\n        });\r\n        \r\n        //绑定根节点触摸事件\r\n        this.bindTouchEvent(root, component, DEFAULT_EVENT_NAMES);\r\n        //绑定所有组件子节点\r\n        this.bindNode(component.node, component);\r\n    }\r\n\r\n    // 编写子节点到 target 对象\r\n    public bindNode(node : cc.Node, target: cc.Component, options: object = null) : void {\r\n        //初始选项\r\n        target[\"$options\"] = options || {};\r\n        //检查属性收集器\r\n        if (target[\"$collector\"]) {\r\n            //重复绑定，退出\r\n            if (target[\"$collector\"].node === node) {\r\n                return;\r\n            }\r\n            //更换绑定，删除之前绑定的节点\r\n            delete target[\"$collector\"].node;\r\n            //遍历收集器上的属性名，删除绑定属性\r\n            Object.keys(target[\"$collector\"]).forEach((key) => {\r\n                delete target[key];\r\n            });\r\n        }\r\n        \r\n        //初始化收集器\r\n        target[\"$collector\"] = { node };\r\n        //遍历根节点上的组件并绑定到target\r\n        node[\"_components\"].forEach((component) => {\r\n            let name = this.getComponentName(component);\r\n            name = `$${name}`;\r\n            target[name] = component;\r\n            target[\"$collector\"][name] = component;\r\n        });\r\n        \r\n        //开始绑定节点\r\n        this.bindStartByPlugins(node, target);\r\n        this.bindSubNode(node, target);\r\n        this.bindEndByPlugins(node, target);\r\n    }\r\n\r\n    /**\r\n     * 递归绑定节点\r\n     * @param {cc.Node} nodeObject \r\n     * @param {Object} target \r\n     */\r\n    private bindSubNode(nodeObject:  cc.Node, target: cc.Component ) {\r\n        const node = nodeObject;\r\n        let isBindNode = false;\r\n        //绑定组件到自身node节点上\r\n        if (node.name[0] === this._prefix) {\r\n            node[\"_components\"].forEach((component) => {\r\n                let name = this.getComponentName(component);\r\n                \r\n                name = `$${name}`;\r\n                if (node[name] && target[\"$options\"].debug) {\r\n                    cc.warn(`${name} property is already exists`);\r\n                    return;\r\n                }\r\n\r\n                node[name] = component;\r\n                //检查组件 onBind 函数,通知组件,target 对象在绑定自己\r\n                if (this.isFunction(component.onBind)) {\r\n                    component.onBind(target);\r\n                }\r\n                \r\n                // if (component instanceof Thor) {\r\n                //     //判定是否将要自行绑定的节点\r\n                //     if (!isBindNode && component !== target) {\r\n                //         isBindNode = true;\r\n                //     }\r\n\r\n                //     if (!node.active) {\r\n                //         component.bindHammer();\r\n                //     }\r\n                // }\r\n            });\r\n        }\r\n\r\n        //执行插件\r\n        let bool = this.checkNodeByPlugins(node, target);\r\n        if (!bool || isBindNode) {\r\n            return;\r\n        }\r\n        \r\n        node.children.forEach((child) => {\r\n            let name = child.name;\r\n            if (name[0] === this._prefix) {\r\n                let index = name.indexOf('$');\r\n\r\n                //检查控件别名\r\n                if (index !== -1) {\r\n                    child[\"$eventName\"] = name.substr(0, index);\r\n                    child[\"$\"]= name.substr(index + 1);\r\n                    name = child[\"$eventName\"] + child[\"$\"][0].toUpperCase() + child[\"$\"].substr(1);\r\n                    if (!CC_EDITOR) {\r\n                        child.name = name;\r\n                    }\r\n                }\r\n\r\n                if (target[name] && target[\"$options\"].debug) {\r\n                    cc.warn(`${target.name}.${name} property is already exists`);\r\n                    return;\r\n                }\r\n                this.bindTouchEvent(child, target);\r\n\r\n                target[name] = child;\r\n\r\n                //保存绑定的指针\r\n                if (target[\"$collector\"]) {\r\n                    target[\"$collector\"][name] = child;\r\n                }\r\n            } else if (!node[name]) {\r\n                //绑定非前缀子节点\r\n                node[name] = child;\r\n            }\r\n\r\n            this.bindSubNode(child, target);\r\n        });\r\n    }\r\n\r\n    private registerPlugin(plugins) : void {\r\n        if (!Array.isArray(plugins)) {\r\n            plugins = [plugins];\r\n        }\r\n\r\n        plugins.forEach((plugin) => {\r\n            //插件能不重复\r\n            let findPlugin = this._plugins.some(item => item.name === plugin.name || item === plugin);\r\n            if (findPlugin) {\r\n                return;\r\n            }\r\n\r\n            //执行插件注册事件\r\n            this._plugins.push(plugin);\r\n            if (plugin.onRegister) {\r\n                plugin.onRegister();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取组件名字\r\n     * @param {cc.Component} component \r\n     */\r\n    public getComponentName(component : cc.Component) {\r\n        return component.name.match(/<.*>$/)[0].slice(1, -1);\r\n    }\r\n\r\n    // 执行插件onBindStart事件s\r\n    private bindStartByPlugins(node: cc.Node, target: cc.Component) {\r\n        this._plugins.forEach((plugin) => {\r\n            if (plugin.onBindStart) {\r\n                plugin.onBindStart(node, target);\r\n            }\r\n        });\r\n    }\r\n\r\n    // 执行插件onBindEnd事件\r\n    private bindEndByPlugins(node : cc.Node, target: cc.Component) {\r\n        this._plugins.forEach((plugin) => {\r\n            if (plugin.onBindEnd) {\r\n                plugin.onBindEnd(node, target);\r\n            }\r\n        });\r\n    }\r\n\r\n    // 绑定触摸事件\r\n    private getTouchEventName(node : cc.Node, event : string = null){\r\n        let name = node[\"$eventName\"] || node.name;\r\n        if (name) {\r\n            name = name[this._prefix.length].toUpperCase() + name.slice(this._prefix.length + 1);\r\n        }\r\n\r\n        if (event) {\r\n            return `_on${name}${event}`;\r\n        }\r\n\r\n        return [\r\n            `_on${name}TouchStart`,\r\n            `_on${name}TouchMove`,\r\n            `_on${name}TouchEnd`,\r\n            `_on${name}TouchCancel`,\r\n        ];\r\n    }\r\n\r\n  \r\n\r\n    // 绑定事件\r\n    private bindTouchEvent(node: cc.Node, target: cc.Component, defaultNames = null): void {\r\n        //todo: EditBox 组件不能注册触摸事件,在原生上会导致不能被输入\r\n        if (node.getComponent(cc.EditBox)) {\r\n            return;\r\n        }\r\n\r\n        const eventNames = defaultNames || this.getTouchEventName(node);\r\n        const eventTypes = [\r\n            cc.Node.EventType.TOUCH_START,\r\n            cc.Node.EventType.TOUCH_MOVE,\r\n            cc.Node.EventType.TOUCH_END,\r\n            cc.Node.EventType.TOUCH_CANCEL,\r\n        ];\r\n\r\n        eventNames.forEach((eventName, index) => {\r\n            const tempEvent = target[eventName];\r\n            if (!tempEvent && !node.getComponent(cc.Button)) {\r\n                return;\r\n            }\r\n\r\n            node.on(eventTypes[index], (event) => {\r\n                //被禁用的node 节点不响应事件\r\n                let eventNode = event.currentTarget;\r\n                if (eventNode.interactable === false || eventNode.active === false) {\r\n                    return;\r\n                }\r\n                \r\n                //检查button组件是否有事件处理函数，有则执行插件事件处理\r\n                const button = eventNode.getComponent(cc.Button);\r\n                if (button && button.interactable === false) {\r\n                    return;\r\n                }\r\n                const eventFunc = target[eventName];\r\n                //是否有效事件\r\n                const isValidEvent = eventFunc || (button && button.clickEvents.length);\r\n                if (isValidEvent) {\r\n                    this.beforeHandleEventByPlugins(eventNode, event, !!eventFunc);\r\n                }\r\n                \r\n                //执行事件函数，获取返回值\r\n                let eventResult;\r\n                if (eventFunc) {\r\n                    eventResult = eventFunc.call(target, eventNode, event);\r\n                    //如果是触摸开始事件，返回fasle，使用节点可穿透\r\n                    if (event.type === cc.Node.EventType.TOUCH_START && eventResult === false) {\r\n                        eventNode._touchListener.setSwallowTouches(false);\r\n                    } else {\r\n                        node[\"_touchListener\"].setSwallowTouches(true);\r\n                        event.stopPropagation();\r\n                    }\r\n                }\r\n\r\n                //检查button组件是否有事件处理函数，有则执行插件事件处理\r\n                if (isValidEvent) {\r\n                    this.afterHandleEventByPlugins(eventNode, event, !!eventFunc, eventResult);\r\n                }\r\n            });\r\n        });\r\n\r\n        //绑定长按事件\r\n        this.bindTouchLongEvent(node, target);\r\n    }\r\n\r\n\r\n    /**\r\n     * 插件响应节点触摸前事件\r\n     * @param node\r\n     * @param event\r\n     * @private\r\n     */\r\n    private beforeHandleEventByPlugins(node, event, hasEventFunc) : void {\r\n        this._plugins.forEach((item) => {\r\n            if (item.onBeforeHandleEvent) {\r\n                item.onBeforeHandleEvent(node, event, hasEventFunc);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 绑定长按事件\r\n     * @param {cc.Node} node\r\n     */\r\n    private bindTouchLongEvent(nodeObject, target): void {\r\n        const node = nodeObject;\r\n        const eventName  = this.getTouchEventName(node, 'TouchLong');\r\n\r\n        const touchLong  = target[`${eventName}`];\r\n        if (!this.isFunction(touchLong)) {\r\n            return;\r\n        }\r\n\r\n        node._touchLongTimer = null;\r\n        node.on(cc.Node.EventType.TOUCH_END, () => {\r\n            if (node._touchLongTimer) {\r\n                clearTimeout(node._touchLongTimer);\r\n                node._touchLongTimer = 0;\r\n                delete node.interactable;\r\n            }\r\n        });\r\n\r\n        node.on(cc.Node.EventType.TOUCH_START, (event) => {\r\n            node._touchLongTimer = setTimeout(() => {\r\n                //准备触发touchLong事件\r\n                node.interactable = !!touchLong.call(target, node, event);\r\n                node._touchLongTimer = 0;\r\n            }, node.touchLongTime || 1000);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 拿所有插件去检查node 节点, onCheckNode返回为 false 的,此节点将不被绑定\r\n     * @param node\r\n     * @param target\r\n     * @returns {boolean}\r\n     * @private\r\n     */\r\n    private checkNodeByPlugins(node, target): any {\r\n        // find\r\n        const plugin = this._plugins.some((item) => {\r\n            if (item.onCheckNode) {\r\n                return item.onCheckNode(node, target) === false;\r\n            }\r\n            return null;\r\n        });\r\n\r\n        return !plugin;\r\n    }\r\n\r\n     /**\r\n     * 插件响应节点触摸后事件\r\n     * @param node\r\n     * @param event\r\n     * @private\r\n     */\r\n    private  afterHandleEventByPlugins(node, event, hasEventFunc, eventResult) : void {\r\n        this._plugins.forEach((item) => {\r\n            if (item.onAfterHandleEvent) {\r\n                item.onAfterHandleEvent(node, event, hasEventFunc, eventResult);\r\n            }\r\n        });\r\n    }\r\n\r\n    public isFunction(value) : boolean{\r\n        return typeof value === 'function';\r\n    }\r\n}\r\n"]}