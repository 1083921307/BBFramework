{"version":3,"sources":["assets\\framework\\event\\EventManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\ninterface IEvent {\r\n    type: number,\r\n    priority: number, \r\n    class_id: string,\r\n    callback: (data) => void\r\n} \r\n\r\nexport default class EventManager {\r\n    static singleInstance: EventManager = null;\r\n    static getInstance(): EventManager {\r\n        if (EventManager.singleInstance == null) {\r\n            EventManager.singleInstance = new EventManager();\r\n        }\r\n        return EventManager.singleInstance;\r\n    }\r\n    event_cache: {[key: number]: Array<IEvent>} = null;\r\n\r\n    constructor() {\r\n        this.event_cache = {};\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {number} type 事件类型\r\n     * @param {Function} callback 触发函数\r\n     * @param {string} tag 标识这个回调函数属于哪一个类(每个类都有一个唯一标识符)\r\n     * @param {number} priority 事件优先级\r\n     */\r\n    addEventListener(type: number, callback: any, class_id: string = \"\", priority: number = 0) {\r\n        if (!type || !callback) { \r\n            return;\r\n        }\r\n        let sub_cache: Array<IEvent> = this.event_cache[type] || [];\r\n        let hasSame = false;\r\n        for (let i = 0; i < sub_cache.length; i++) {\r\n            if (sub_cache[i].callback === callback) {\r\n                hasSame = true;\r\n                break;\r\n            }\r\n        }\r\n        if (hasSame) {\r\n            return;\r\n        } \r\n        let ievent: IEvent = {\r\n            type: type,\r\n            class_id: class_id,\r\n            priority: priority, \r\n            callback: callback\r\n        };\r\n        if (priority > 0) {\r\n            let isPush = true;\r\n            for(let i = sub_cache.length - 1; i >=0; i--) {\r\n                if ( sub_cache[i].priority > priority) {\r\n                    sub_cache.splice(i + 1, 0, ievent);\r\n                    isPush = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (isPush) {\r\n                sub_cache.splice(0, 0, ievent);\r\n            }\r\n        } else {\r\n            sub_cache.push(ievent);\r\n        }\r\n        this.event_cache[type] = sub_cache;\r\n    } \r\n\r\n    dispatchEvent(type: number, params?: any) {\r\n        if (!type) {\r\n            return;\r\n        }\r\n        let sub_cache: Array<IEvent> = this.event_cache[type];\r\n        if (!sub_cache) {\r\n           return;\r\n        }\r\n        for (let i = 0; i < sub_cache.length; i++) {\r\n            let ievent = sub_cache[i];\r\n            ievent.callback(params)\r\n        }\r\n    }\r\n\r\n    removeEventListener(type: number, callback: any) {\r\n        if (!type || !callback) {\r\n            return;\r\n         }\r\n         let sub_cache: Array<IEvent>  = this.event_cache[type];\r\n         if (!sub_cache) {\r\n             return;\r\n         }\r\n         for (let i = 0; i < sub_cache.length; i++) {\r\n             if (sub_cache[i].callback === callback) {\r\n                 sub_cache.splice(i, 1);\r\n                 break;\r\n             }\r\n         }\r\n         if (sub_cache.length == 0) {\r\n             delete this.event_cache[type];\r\n         }\r\n    }\r\n\r\n    removeEventListenerByTag(type: number, class_id: string) {\r\n        if (!type) {\r\n            return;\r\n        }\r\n\r\n        for(let key in this.event_cache) {\r\n            let sub_cache: Array<IEvent> = this.event_cache[key];\r\n            if (!sub_cache) {\r\n                continue;\r\n            }\r\n            for (let i = 0; i < sub_cache.length; i++) {\r\n                if (sub_cache[i].class_id === class_id) {\r\n                    sub_cache.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n            if (sub_cache.length == 0) {\r\n                delete this.event_cache[type];\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}